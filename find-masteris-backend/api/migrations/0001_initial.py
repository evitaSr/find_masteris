# Generated by Django 5.2.7 on 2025-10-25 19:55

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='FindMasterisUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.CharField(blank=True, choices=[('admin', 'Admin'), ('handyman', 'Handyman'), ('client', 'Client')], default='client', max_length=20, null=True, verbose_name='Role')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100, verbose_name='Title')),
            ],
            options={
                'verbose_name': 'Category',
                'verbose_name_plural': 'Categories',
                'ordering': ['title'],
            },
        ),
        migrations.CreateModel(
            name='JobEntry',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100, verbose_name='Title')),
                ('description', models.TextField(verbose_name='Description')),
            ],
            options={
                'verbose_name': 'Job entry',
                'verbose_name_plural': 'Job entries',
                'ordering': ['pk'],
            },
        ),
        migrations.CreateModel(
            name='RequestToAdd',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('request_sent', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Request sent at')),
                ('is_rejected', models.BooleanField(default=False, verbose_name='Is accepted')),
            ],
        ),
        migrations.CreateModel(
            name='Handyman',
            fields=[
                ('findmasterisuser_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('contact_email', models.EmailField(max_length=255, verbose_name='Contact email')),
                ('phone_no', models.CharField(blank=True, default=None, max_length=20, null=True, verbose_name='Phone No')),
                ('website', models.CharField(blank=True, default=None, max_length=255, null=True, verbose_name='Website')),
            ],
            options={
                'verbose_name': 'Handyman',
                'verbose_name_plural': 'Handymen',
                'ordering': ['first_name', 'last_name'],
            },
            bases=('api.findmasterisuser',),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='JobEntryFile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(upload_to='job_entry/files/', verbose_name='File')),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('job_entry', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='files', to='api.jobentry', verbose_name='Job entry')),
            ],
            options={
                'verbose_name': 'Job entry file',
                'verbose_name_plural': 'Job entry files',
                'ordering': ['uploaded_at'],
            },
        ),
        migrations.CreateModel(
            name='RequestToAddCategory',
            fields=[
                ('requesttoadd_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='api.requesttoadd')),
                ('title', models.CharField(max_length=100, verbose_name='Category title')),
            ],
            options={
                'verbose_name': 'Request to add category',
                'verbose_name_plural': 'Requests to add category',
                'ordering': ['request_sent'],
            },
            bases=('api.requesttoadd',),
        ),
        migrations.CreateModel(
            name='Service',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100, verbose_name='Title')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='api.category', verbose_name='Category')),
            ],
            options={
                'verbose_name': 'Service',
                'verbose_name_plural': 'Services',
                'ordering': ['title'],
            },
        ),
        migrations.AddField(
            model_name='jobentry',
            name='service',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='api.service', verbose_name='Service'),
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='Rating')),
                ('description', models.CharField(blank=True, default=None, max_length=100, null=True, verbose_name='Description')),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('client', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Client')),
                ('service', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='api.service', verbose_name='Service')),
                ('handyman', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='received_reviews', to='api.handyman', verbose_name='Handyman')),
            ],
            options={
                'verbose_name': 'Review',
                'verbose_name_plural': 'Reviews',
                'ordering': ['created_on'],
            },
        ),
        migrations.AddField(
            model_name='requesttoadd',
            name='requested_by',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='category_requests', to='api.handyman', verbose_name='Requested by'),
        ),
        migrations.AddField(
            model_name='jobentry',
            name='handyman',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.handyman', verbose_name='Handyman'),
        ),
        migrations.CreateModel(
            name='RequestToAddService',
            fields=[
                ('requesttoadd_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='api.requesttoadd')),
                ('title', models.CharField(max_length=100, verbose_name='Service title')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.category', verbose_name='Category')),
            ],
            options={
                'verbose_name': 'Request to add service',
                'verbose_name_plural': 'Requests to add service',
                'ordering': ['request_sent'],
            },
            bases=('api.requesttoadd',),
        ),
    ]
